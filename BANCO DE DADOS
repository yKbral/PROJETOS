CREATE TABLE Vendas (
    ID_NF INT,
    ID_ITEM INT,
    COD_PROD INT,
    QUANTIDADE INT,
    VALOR_UNIT DECIMAL(10, 2),
    DESCONTO DECIMAL(5, 2)
);


INSERT INTO Vendas (ID_NF, ID_ITEM, COD_PROD, QUANTIDADE, VALOR_UNIT, DESCONTO) VALUES
(1, 1, 1, 25.00, 10, 5.00),
(1, 2, 2, 13.50, 3, NULL),
(1, 3, 3, 15.00, 2, NULL),
(1, 4, 4, 10.00, 1, NULL),
(1, 5, 5, 30.00, 1, NULL),
(2, 1, 3, 15.00, 4, NULL),
(2, 2, 4, 10.00, 5, NULL),
(2, 3, 5, 30.00, 7, NULL),
(3, 1, 1, 25.00, 5, NULL),
(3, 2, 4, 10.00, 4, NULL),
(3, 3, 5, 30.00, 5, NULL),
(3, 4, 2, 13.50, 7, NULL),
(4, 1, 5, 30.00, 10, 15.00),
(4, 2, 4, 10.00, 12, 5.00),
(4, 3, 1, 25.00, 13, 5.00),
(4, 4, 2, 13.50, 15, 5.00),
(5, 1, 3, 15.00, 3, NULL),
(5, 2, 5, 30.00, 5, NULL),
(6, 1, 1, 25.00, 22, 15.00),
(6, 2, 3, 15.00, 25, 20.00),
(7, 1, 1, 25.00, 10, 3.00),
(7, 2, 2, 13.50, 10, 4.00),
(7, 3, 3, 15.00, 10, 4.00),
(7, 4, 5, 30.00, 10, 1.00);


-- a) Pesquisar itens vendidos sem desconto
SELECT ID_NF, ID_ITEM, COD_PROD, VALOR_UNIT
FROM Vendas
WHERE DESCONTO IS NULL OR DESCONTO = 0;


-- b) Pesquisar itens vendidos com desconto
SELECT ID_NF, ID_ITEM, COD_PROD, VALOR_UNIT,
       VALOR_UNIT - (VALOR_UNIT * (DESCONTO / 100)) AS VALOR_VENDIDO
FROM Vendas
WHERE DESCONTO IS NOT NULL AND DESCONTO <> 0;


-- c) Atualizar desconto nulo para zero
UPDATE Vendas
SET DESCONTO = 0
WHERE DESCONTO IS NULL;


-- d) Pesquisar itens vendidos com todos os detalhes
SELECT ID_NF, ID_ITEM, COD_PROD, VALOR_UNIT,
       QUANTIDADE * VALOR_UNIT AS VALOR_TOTAL,
       DESCONTO,
       VALOR_UNIT - (VALOR_UNIT * (DESCONTO / 100)) AS VALOR_VENDIDO
FROM Vendas;


-- e) Valor total das notas fiscais, ordenado do maior para o menor
SELECT ID_NF, SUM(QUANTIDADE * VALOR_UNIT) AS VALOR_TOTAL
FROM Vendas
GROUP BY ID_NF
ORDER BY VALOR_TOTAL DESC;


-- f) Valor vendido das notas fiscais, ordenado do maior para o menor
SELECT ID_NF,
       SUM(QUANTIDADE * (VALOR_UNIT - (VALOR_UNIT * (DESCONTO / 100)))) AS VALOR_VENDIDO
FROM Vendas
GROUP BY ID_NF
ORDER BY VALOR_VENDIDO DESC;


-- g) Produto mais vendido no geral
SELECT COD_PROD, SUM(QUANTIDADE) AS QUANTIDADE
FROM Vendas
GROUP BY COD_PROD
ORDER BY QUANTIDADE DESC
LIMIT 1;


-- h) Notas fiscais com mais de 10 unidades vendidas de pelo menos um produto
SELECT ID_NF, COD_PROD, SUM(QUANTIDADE) AS QUANTIDADE
FROM Vendas
GROUP BY ID_NF, COD_PROD
HAVING SUM(QUANTIDADE) > 10;


-- i) Notas fiscais com valor total maior que 500, ordenado do maior para o menor
SELECT ID_NF, SUM(QUANTIDADE * VALOR_UNIT) AS VALOR_TOT
FROM Vendas
GROUP BY ID_NF
HAVING SUM(QUANTIDADE * VALOR_UNIT) > 500
ORDER BY VALOR_TOT DESC;


-- j) Valor médio dos descontos dados por produto
SELECT COD_PROD, AVG(DESCONTO) AS MEDIA
FROM Vendas
GROUP BY COD_PROD;


-- k) Menor, maior e valor médio dos descontos dados por produto
SELECT COD_PROD,
       MIN(DESCONTO) AS MENOR,
       MAX(DESCONTO) AS MAIOR,
       AVG(DESCONTO) AS MEDIA
FROM Vendas
GROUP BY COD_PROD;


-- l) Notas fiscais com mais de 3 itens vendidos
SELECT ID_NF, COUNT(*) AS QTD_ITENS
FROM Vendas
GROUP BY ID_NF
HAVING COUNT(*) > 3;



















-- Criação da base de dados Universidade
CREATE DATABASE Universidade;


-- Selecionando a base de dados Universidade
USE Universidade;


-- Criação das tabelas
CREATE TABLE Alunos (
    MAT INT PRIMARY KEY,
    NOME VARCHAR(100),
    ENDERECO VARCHAR(100),
    CIDADE VARCHAR(50)
);


CREATE TABLE Disciplinas (
    COD_DISC VARCHAR(10) PRIMARY KEY,
    NOME_DISC VARCHAR(100),
    CARGA_HOR INT
);


CREATE TABLE Professores (
    COD_PROF INT PRIMARY KEY,
    NOME VARCHAR(100),
    ENDERECO VARCHAR(100),
    CIDADE VARCHAR(50)
);


CREATE TABLE Turma (
    COD_DISC VARCHAR(10),
    COD_TURMA INT,
    COD_PROF INT,
    ANO INT,
    HORARIO VARCHAR(20),
    PRIMARY KEY (COD_DISC, COD_TURMA, COD_PROF, ANO),
    FOREIGN KEY (COD_DISC) REFERENCES Disciplinas(COD_DISC),
    FOREIGN KEY (COD_PROF) REFERENCES Professores(COD_PROF)
);












CREATE TABLE Historico (
    MAT INT,
    COD_DISC VARCHAR(10),
    COD_TURMA INT,
    COD_PROF INT,
    ANO INT,
    FREQUENCIA DECIMAL(5, 2),
    NOTA DECIMAL(5, 2),
    PRIMARY KEY (MAT, COD_DISC, COD_TURMA, COD_PROF, ANO),
    FOREIGN KEY (MAT) REFERENCES Alunos(MAT),
    FOREIGN KEY (COD_DISC, COD_TURMA, COD_PROF, ANO) REFERENCES Turma(COD_DISC, COD_TURMA, COD_PROF, ANO)
);


-- Inserção dos registros
INSERT INTO Alunos (MAT, NOME, ENDERECO, CIDADE) VALUES
(2015010101, 'JOSE DE ALENCAR', 'RUA DAS ALMAS', 'NATAL'),
(2015010102, 'JOÃO JOSÉ', 'AVENIDA RUY CARNEIRO', 'JOÃO PESSOA'),
(2015010103, 'MARIA JOAQUINA', 'RUA CARROSSEL', 'RECIFE'),
(2015010104, 'MARIA DAS DORES', 'RUA DAS LADEIRAS', 'FORTALEZA'),
(2015010105, 'JOSUÉ CLAUDINO DOS SANTOS', 'CENTRO', 'NATAL'),
(2015010106, 'JOSUÉLISSON CLAUDINO DOS SANTOS', 'CENTRO', 'NATAL');


INSERT INTO Disciplinas (COD_DISC, NOME_DISC, CARGA_HOR) VALUES
('BD', 'BANCO DE DADOS', 100),
('POO', 'PROGRAMAÇÃO COM ACESSO A BANCO DE DADOS', 100),
('WEB', 'AUTORIA WEB', 50),
('ENG', 'ENGENHARIA DE SOFTWARE', 80);


INSERT INTO Professores (COD_PROF, NOME, ENDERECO, CIDADE) VALUES
(212131, 'NICKERSON FERREIRA', 'RUA MANAÍRA', 'JOÃO PESSOA'),
(122135, 'ADORILSON BEZERRA', 'AVENIDA SALGADO FILHO', 'NATAL'),
(192011, 'DIEGO OLIVEIRA', 'AVENIDA ROBERTO FREIRE', 'NATAL');


INSERT INTO Turma (COD_DISC, COD_TURMA, COD_PROF, ANO, HORARIO) VALUES
('BD', 1, 212131, 2015, '11H-12H'),
('BD', 2, 212131, 2015, '13H-14H'),
('POO', 1, 192011, 2015, '08H-09H'),
('WEB', 1, 192011, 2015, '07H-08H'),
('ENG', 1, 122135, 2015, '10H-11H');






INSERT INTO Historico (MAT, COD_DISC, COD_TURMA, COD_PROF, ANO, FREQUENCIA, NOTA) VALUES
(2015010101, 'BD', 1, 212131, 2015, 90, 4.5),
(2015010102, 'BD', 1, 212131, 2015, 95, 6.0),
(2015010103, 'BD', 1, 212131, 2015, 85, 7.5),
(2015010104, 'BD', 1, 212131, 2015, 80, 5.0),
(2015010105, 'BD', 1, 212131, 2015, 70, 8.0),
(2015010106, 'BD', 1, 212131, 2015, 75, 9.0),
(2015010101, 'POO', 1, 192011, 2015, 85, 6.5),
(2015010102, 'POO', 1, 192011, 2015, 90, 5.5),
(2015010103, 'POO', 1, 192011, 2015, 80, 7.0),
(2015010104, 'POO', 1, 192011, 2015, 85, 6.0),
(2015010105, 'POO', 1, 192011, 2015, 70, 8.5),
(2015010106, 'POO', 1, 192011, 2015, 75, 7.5),
(2015010101, 'WEB', 1, 192011, 2015, 85, 7.0),
(2015010102, 'WEB', 1, 192011, 2015, 90, 8.0),
(2015010103, 'WEB', 1, 192011, 2015, 80, 9.0),
(2015010104, 'WEB', 1, 192011, 2015, 85, 6.5),
(2015010105, 'WEB', 1, 192011, 2015, 70, 7.5),
(2015010106, 'WEB', 1, 192011, 2015, 75, 8.5),
(2015010101, 'ENG', 1, 122135, 2015, 85, 9.0),
(2015010102, 'ENG', 1, 122135, 2015, 90, 6.5),
(2015010103, 'ENG', 1, 122135, 2015, 80, 7.5),
(2015010104, 'ENG', 1, 122135, 2015, 85, 5.5),
(2015010105, 'ENG', 1, 122135, 2015, 70, 8.0),
(2015010106, 'ENG', 1, 122135, 2015, 75, 7.0);


-- Consultas solicitadas
-- a) Encontre a MAT dos alunos com nota em BD em 2015 menor que 5
SELECT MAT
FROM Historico
WHERE COD_DISC = 'BD' AND ANO = 2015 AND NOTA < 5;


-- b) Encontre a MAT e calcule a média das notas dos alunos na disciplina de POO em 2015
SELECT MAT, AVG(NOTA) AS MEDIA
FROM Historico
WHERE COD_DISC = 'POO' AND ANO = 2015
GROUP BY MAT;






-- c) Encontre a MAT e calcule a média das notas dos alunos na disciplina de POO em 2015 e que esta média seja superior a 6
SELECT MAT, AVG(NOTA) AS MEDIA
FROM Historico
WHERE COD_DISC = 'POO' AND ANO = 2015
GROUP BY MAT
HAVING AVG(NOTA) > 6;






-- d) Encontre quantos alunos não são de Natal
SELECT COUNT(*) AS QTD_ALUNOS_NAO_NATAL
FROM Alunos
WHERE CIDADE <> 'NATAL';





